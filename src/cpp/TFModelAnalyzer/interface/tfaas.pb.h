// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tfaas.proto

#ifndef PROTOBUF_tfaas_2eproto__INCLUDED
#define PROTOBUF_tfaas_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_tfaas_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDetectorImpl();
void InitDefaultsDetector();
void InitDefaultsHitsImpl();
void InitDefaultsHits();
void InitDefaultsPairImpl();
void InitDefaultsPair();
void InitDefaultsRowImpl();
void InitDefaultsRow();
void InitDefaultsDataFrameImpl();
void InitDefaultsDataFrame();
void InitDefaultsClassImpl();
void InitDefaultsClass();
void InitDefaultsPredictionsImpl();
void InitDefaultsPredictions();
inline void InitDefaults() {
  InitDefaultsDetector();
  InitDefaultsHits();
  InitDefaultsPair();
  InitDefaultsRow();
  InitDefaultsDataFrame();
  InitDefaultsClass();
  InitDefaultsPredictions();
}
}  // namespace protobuf_tfaas_2eproto
namespace tfaaspb {
class Class;
class ClassDefaultTypeInternal;
extern ClassDefaultTypeInternal _Class_default_instance_;
class DataFrame;
class DataFrameDefaultTypeInternal;
extern DataFrameDefaultTypeInternal _DataFrame_default_instance_;
class Detector;
class DetectorDefaultTypeInternal;
extern DetectorDefaultTypeInternal _Detector_default_instance_;
class Hits;
class HitsDefaultTypeInternal;
extern HitsDefaultTypeInternal _Hits_default_instance_;
class Pair;
class PairDefaultTypeInternal;
extern PairDefaultTypeInternal _Pair_default_instance_;
class Predictions;
class PredictionsDefaultTypeInternal;
extern PredictionsDefaultTypeInternal _Predictions_default_instance_;
class Row;
class RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
}  // namespace tfaaspb
namespace tfaaspb {

// ===================================================================

class Detector : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tfaaspb.Detector) */ {
 public:
  Detector();
  virtual ~Detector();

  Detector(const Detector& from);

  inline Detector& operator=(const Detector& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Detector(Detector&& from) noexcept
    : Detector() {
    *this = ::std::move(from);
  }

  inline Detector& operator=(Detector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Detector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Detector* internal_default_instance() {
    return reinterpret_cast<const Detector*>(
               &_Detector_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Detector* other);
  friend void swap(Detector& a, Detector& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Detector* New() const PROTOBUF_FINAL { return New(NULL); }

  Detector* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Detector& from);
  void MergeFrom(const Detector& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Detector* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float x = 2;
  int x_size() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x(int index) const;
  void set_x(int index, float value);
  void add_x(float value);
  const ::google::protobuf::RepeatedField< float >&
      x() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_x();

  // repeated float y = 3;
  int y_size() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y(int index) const;
  void set_y(int index, float value);
  void add_y(float value);
  const ::google::protobuf::RepeatedField< float >&
      y() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_y();

  // repeated float z = 4;
  int z_size() const;
  void clear_z();
  static const int kZFieldNumber = 4;
  float z(int index) const;
  void set_z(int index, float value);
  void add_z(float value);
  const ::google::protobuf::RepeatedField< float >&
      z() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_z();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:tfaaspb.Detector)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > x_;
  mutable int _x_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > y_;
  mutable int _y_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > z_;
  mutable int _z_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_tfaas_2eproto::TableStruct;
  friend void ::protobuf_tfaas_2eproto::InitDefaultsDetectorImpl();
};
// -------------------------------------------------------------------

class Hits : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tfaaspb.Hits) */ {
 public:
  Hits();
  virtual ~Hits();

  Hits(const Hits& from);

  inline Hits& operator=(const Hits& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Hits(Hits&& from) noexcept
    : Hits() {
    *this = ::std::move(from);
  }

  inline Hits& operator=(Hits&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Hits& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hits* internal_default_instance() {
    return reinterpret_cast<const Hits*>(
               &_Hits_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Hits* other);
  friend void swap(Hits& a, Hits& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Hits* New() const PROTOBUF_FINAL { return New(NULL); }

  Hits* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Hits& from);
  void MergeFrom(const Hits& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Hits* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tfaaspb.Detector det = 1;
  int det_size() const;
  void clear_det();
  static const int kDetFieldNumber = 1;
  const ::tfaaspb::Detector& det(int index) const;
  ::tfaaspb::Detector* mutable_det(int index);
  ::tfaaspb::Detector* add_det();
  ::google::protobuf::RepeatedPtrField< ::tfaaspb::Detector >*
      mutable_det();
  const ::google::protobuf::RepeatedPtrField< ::tfaaspb::Detector >&
      det() const;

  // @@protoc_insertion_point(class_scope:tfaaspb.Hits)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tfaaspb::Detector > det_;
  mutable int _cached_size_;
  friend struct ::protobuf_tfaas_2eproto::TableStruct;
  friend void ::protobuf_tfaas_2eproto::InitDefaultsHitsImpl();
};
// -------------------------------------------------------------------

class Pair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tfaaspb.Pair) */ {
 public:
  Pair();
  virtual ~Pair();

  Pair(const Pair& from);

  inline Pair& operator=(const Pair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pair(Pair&& from) noexcept
    : Pair() {
    *this = ::std::move(from);
  }

  inline Pair& operator=(Pair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pair* internal_default_instance() {
    return reinterpret_cast<const Pair*>(
               &_Pair_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Pair* other);
  friend void swap(Pair& a, Pair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pair* New() const PROTOBUF_FINAL { return New(NULL); }

  Pair* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pair& from);
  void MergeFrom(const Pair& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // float value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  float value() const;
  void set_value(float value);

  // @@protoc_insertion_point(class_scope:tfaaspb.Pair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  float value_;
  mutable int _cached_size_;
  friend struct ::protobuf_tfaas_2eproto::TableStruct;
  friend void ::protobuf_tfaas_2eproto::InitDefaultsPairImpl();
};
// -------------------------------------------------------------------

class Row : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tfaaspb.Row) */ {
 public:
  Row();
  virtual ~Row();

  Row(const Row& from);

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Row* other);
  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Row* New() const PROTOBUF_FINAL { return New(NULL); }

  Row* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Row* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tfaaspb.Pair pair = 1;
  int pair_size() const;
  void clear_pair();
  static const int kPairFieldNumber = 1;
  const ::tfaaspb::Pair& pair(int index) const;
  ::tfaaspb::Pair* mutable_pair(int index);
  ::tfaaspb::Pair* add_pair();
  ::google::protobuf::RepeatedPtrField< ::tfaaspb::Pair >*
      mutable_pair();
  const ::google::protobuf::RepeatedPtrField< ::tfaaspb::Pair >&
      pair() const;

  // @@protoc_insertion_point(class_scope:tfaaspb.Row)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tfaaspb::Pair > pair_;
  mutable int _cached_size_;
  friend struct ::protobuf_tfaas_2eproto::TableStruct;
  friend void ::protobuf_tfaas_2eproto::InitDefaultsRowImpl();
};
// -------------------------------------------------------------------

class DataFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tfaaspb.DataFrame) */ {
 public:
  DataFrame();
  virtual ~DataFrame();

  DataFrame(const DataFrame& from);

  inline DataFrame& operator=(const DataFrame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataFrame(DataFrame&& from) noexcept
    : DataFrame() {
    *this = ::std::move(from);
  }

  inline DataFrame& operator=(DataFrame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DataFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataFrame* internal_default_instance() {
    return reinterpret_cast<const DataFrame*>(
               &_DataFrame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(DataFrame* other);
  friend void swap(DataFrame& a, DataFrame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataFrame* New() const PROTOBUF_FINAL { return New(NULL); }

  DataFrame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataFrame& from);
  void MergeFrom(const DataFrame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataFrame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tfaaspb.Row row = 1;
  int row_size() const;
  void clear_row();
  static const int kRowFieldNumber = 1;
  const ::tfaaspb::Row& row(int index) const;
  ::tfaaspb::Row* mutable_row(int index);
  ::tfaaspb::Row* add_row();
  ::google::protobuf::RepeatedPtrField< ::tfaaspb::Row >*
      mutable_row();
  const ::google::protobuf::RepeatedPtrField< ::tfaaspb::Row >&
      row() const;

  // @@protoc_insertion_point(class_scope:tfaaspb.DataFrame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tfaaspb::Row > row_;
  mutable int _cached_size_;
  friend struct ::protobuf_tfaas_2eproto::TableStruct;
  friend void ::protobuf_tfaas_2eproto::InitDefaultsDataFrameImpl();
};
// -------------------------------------------------------------------

class Class : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tfaaspb.Class) */ {
 public:
  Class();
  virtual ~Class();

  Class(const Class& from);

  inline Class& operator=(const Class& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Class(Class&& from) noexcept
    : Class() {
    *this = ::std::move(from);
  }

  inline Class& operator=(Class&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Class& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Class* internal_default_instance() {
    return reinterpret_cast<const Class*>(
               &_Class_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Class* other);
  friend void swap(Class& a, Class& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Class* New() const PROTOBUF_FINAL { return New(NULL); }

  Class* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Class& from);
  void MergeFrom(const Class& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Class* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string label = 1;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  const ::std::string& label() const;
  void set_label(const ::std::string& value);
  #if LANG_CXX11
  void set_label(::std::string&& value);
  #endif
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  ::std::string* mutable_label();
  ::std::string* release_label();
  void set_allocated_label(::std::string* label);

  // float probability = 2;
  void clear_probability();
  static const int kProbabilityFieldNumber = 2;
  float probability() const;
  void set_probability(float value);

  // @@protoc_insertion_point(class_scope:tfaaspb.Class)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr label_;
  float probability_;
  mutable int _cached_size_;
  friend struct ::protobuf_tfaas_2eproto::TableStruct;
  friend void ::protobuf_tfaas_2eproto::InitDefaultsClassImpl();
};
// -------------------------------------------------------------------

class Predictions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tfaaspb.Predictions) */ {
 public:
  Predictions();
  virtual ~Predictions();

  Predictions(const Predictions& from);

  inline Predictions& operator=(const Predictions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Predictions(Predictions&& from) noexcept
    : Predictions() {
    *this = ::std::move(from);
  }

  inline Predictions& operator=(Predictions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Predictions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Predictions* internal_default_instance() {
    return reinterpret_cast<const Predictions*>(
               &_Predictions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Predictions* other);
  friend void swap(Predictions& a, Predictions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Predictions* New() const PROTOBUF_FINAL { return New(NULL); }

  Predictions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Predictions& from);
  void MergeFrom(const Predictions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Predictions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tfaaspb.Class prediction = 1;
  int prediction_size() const;
  void clear_prediction();
  static const int kPredictionFieldNumber = 1;
  const ::tfaaspb::Class& prediction(int index) const;
  ::tfaaspb::Class* mutable_prediction(int index);
  ::tfaaspb::Class* add_prediction();
  ::google::protobuf::RepeatedPtrField< ::tfaaspb::Class >*
      mutable_prediction();
  const ::google::protobuf::RepeatedPtrField< ::tfaaspb::Class >&
      prediction() const;

  // @@protoc_insertion_point(class_scope:tfaaspb.Predictions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tfaaspb::Class > prediction_;
  mutable int _cached_size_;
  friend struct ::protobuf_tfaas_2eproto::TableStruct;
  friend void ::protobuf_tfaas_2eproto::InitDefaultsPredictionsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Detector

// string name = 1;
inline void Detector::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Detector::name() const {
  // @@protoc_insertion_point(field_get:tfaaspb.Detector.name)
  return name_.GetNoArena();
}
inline void Detector::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tfaaspb.Detector.name)
}
#if LANG_CXX11
inline void Detector::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tfaaspb.Detector.name)
}
#endif
inline void Detector::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tfaaspb.Detector.name)
}
inline void Detector::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tfaaspb.Detector.name)
}
inline ::std::string* Detector::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:tfaaspb.Detector.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Detector::release_name() {
  // @@protoc_insertion_point(field_release:tfaaspb.Detector.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Detector::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tfaaspb.Detector.name)
}

// repeated float x = 2;
inline int Detector::x_size() const {
  return x_.size();
}
inline void Detector::clear_x() {
  x_.Clear();
}
inline float Detector::x(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.Detector.x)
  return x_.Get(index);
}
inline void Detector::set_x(int index, float value) {
  x_.Set(index, value);
  // @@protoc_insertion_point(field_set:tfaaspb.Detector.x)
}
inline void Detector::add_x(float value) {
  x_.Add(value);
  // @@protoc_insertion_point(field_add:tfaaspb.Detector.x)
}
inline const ::google::protobuf::RepeatedField< float >&
Detector::x() const {
  // @@protoc_insertion_point(field_list:tfaaspb.Detector.x)
  return x_;
}
inline ::google::protobuf::RepeatedField< float >*
Detector::mutable_x() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.Detector.x)
  return &x_;
}

// repeated float y = 3;
inline int Detector::y_size() const {
  return y_.size();
}
inline void Detector::clear_y() {
  y_.Clear();
}
inline float Detector::y(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.Detector.y)
  return y_.Get(index);
}
inline void Detector::set_y(int index, float value) {
  y_.Set(index, value);
  // @@protoc_insertion_point(field_set:tfaaspb.Detector.y)
}
inline void Detector::add_y(float value) {
  y_.Add(value);
  // @@protoc_insertion_point(field_add:tfaaspb.Detector.y)
}
inline const ::google::protobuf::RepeatedField< float >&
Detector::y() const {
  // @@protoc_insertion_point(field_list:tfaaspb.Detector.y)
  return y_;
}
inline ::google::protobuf::RepeatedField< float >*
Detector::mutable_y() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.Detector.y)
  return &y_;
}

// repeated float z = 4;
inline int Detector::z_size() const {
  return z_.size();
}
inline void Detector::clear_z() {
  z_.Clear();
}
inline float Detector::z(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.Detector.z)
  return z_.Get(index);
}
inline void Detector::set_z(int index, float value) {
  z_.Set(index, value);
  // @@protoc_insertion_point(field_set:tfaaspb.Detector.z)
}
inline void Detector::add_z(float value) {
  z_.Add(value);
  // @@protoc_insertion_point(field_add:tfaaspb.Detector.z)
}
inline const ::google::protobuf::RepeatedField< float >&
Detector::z() const {
  // @@protoc_insertion_point(field_list:tfaaspb.Detector.z)
  return z_;
}
inline ::google::protobuf::RepeatedField< float >*
Detector::mutable_z() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.Detector.z)
  return &z_;
}

// -------------------------------------------------------------------

// Hits

// repeated .tfaaspb.Detector det = 1;
inline int Hits::det_size() const {
  return det_.size();
}
inline void Hits::clear_det() {
  det_.Clear();
}
inline const ::tfaaspb::Detector& Hits::det(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.Hits.det)
  return det_.Get(index);
}
inline ::tfaaspb::Detector* Hits::mutable_det(int index) {
  // @@protoc_insertion_point(field_mutable:tfaaspb.Hits.det)
  return det_.Mutable(index);
}
inline ::tfaaspb::Detector* Hits::add_det() {
  // @@protoc_insertion_point(field_add:tfaaspb.Hits.det)
  return det_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tfaaspb::Detector >*
Hits::mutable_det() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.Hits.det)
  return &det_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tfaaspb::Detector >&
Hits::det() const {
  // @@protoc_insertion_point(field_list:tfaaspb.Hits.det)
  return det_;
}

// -------------------------------------------------------------------

// Pair

// string key = 1;
inline void Pair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Pair::key() const {
  // @@protoc_insertion_point(field_get:tfaaspb.Pair.key)
  return key_.GetNoArena();
}
inline void Pair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tfaaspb.Pair.key)
}
#if LANG_CXX11
inline void Pair::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tfaaspb.Pair.key)
}
#endif
inline void Pair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tfaaspb.Pair.key)
}
inline void Pair::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tfaaspb.Pair.key)
}
inline ::std::string* Pair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:tfaaspb.Pair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pair::release_key() {
  // @@protoc_insertion_point(field_release:tfaaspb.Pair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:tfaaspb.Pair.key)
}

// float value = 2;
inline void Pair::clear_value() {
  value_ = 0;
}
inline float Pair::value() const {
  // @@protoc_insertion_point(field_get:tfaaspb.Pair.value)
  return value_;
}
inline void Pair::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:tfaaspb.Pair.value)
}

// -------------------------------------------------------------------

// Row

// repeated .tfaaspb.Pair pair = 1;
inline int Row::pair_size() const {
  return pair_.size();
}
inline void Row::clear_pair() {
  pair_.Clear();
}
inline const ::tfaaspb::Pair& Row::pair(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.Row.pair)
  return pair_.Get(index);
}
inline ::tfaaspb::Pair* Row::mutable_pair(int index) {
  // @@protoc_insertion_point(field_mutable:tfaaspb.Row.pair)
  return pair_.Mutable(index);
}
inline ::tfaaspb::Pair* Row::add_pair() {
  // @@protoc_insertion_point(field_add:tfaaspb.Row.pair)
  return pair_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tfaaspb::Pair >*
Row::mutable_pair() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.Row.pair)
  return &pair_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tfaaspb::Pair >&
Row::pair() const {
  // @@protoc_insertion_point(field_list:tfaaspb.Row.pair)
  return pair_;
}

// -------------------------------------------------------------------

// DataFrame

// repeated .tfaaspb.Row row = 1;
inline int DataFrame::row_size() const {
  return row_.size();
}
inline void DataFrame::clear_row() {
  row_.Clear();
}
inline const ::tfaaspb::Row& DataFrame::row(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.DataFrame.row)
  return row_.Get(index);
}
inline ::tfaaspb::Row* DataFrame::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:tfaaspb.DataFrame.row)
  return row_.Mutable(index);
}
inline ::tfaaspb::Row* DataFrame::add_row() {
  // @@protoc_insertion_point(field_add:tfaaspb.DataFrame.row)
  return row_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tfaaspb::Row >*
DataFrame::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.DataFrame.row)
  return &row_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tfaaspb::Row >&
DataFrame::row() const {
  // @@protoc_insertion_point(field_list:tfaaspb.DataFrame.row)
  return row_;
}

// -------------------------------------------------------------------

// Class

// string label = 1;
inline void Class::clear_label() {
  label_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Class::label() const {
  // @@protoc_insertion_point(field_get:tfaaspb.Class.label)
  return label_.GetNoArena();
}
inline void Class::set_label(const ::std::string& value) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tfaaspb.Class.label)
}
#if LANG_CXX11
inline void Class::set_label(::std::string&& value) {
  
  label_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tfaaspb.Class.label)
}
#endif
inline void Class::set_label(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tfaaspb.Class.label)
}
inline void Class::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tfaaspb.Class.label)
}
inline ::std::string* Class::mutable_label() {
  
  // @@protoc_insertion_point(field_mutable:tfaaspb.Class.label)
  return label_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Class::release_label() {
  // @@protoc_insertion_point(field_release:tfaaspb.Class.label)
  
  return label_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Class::set_allocated_label(::std::string* label) {
  if (label != NULL) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:tfaaspb.Class.label)
}

// float probability = 2;
inline void Class::clear_probability() {
  probability_ = 0;
}
inline float Class::probability() const {
  // @@protoc_insertion_point(field_get:tfaaspb.Class.probability)
  return probability_;
}
inline void Class::set_probability(float value) {
  
  probability_ = value;
  // @@protoc_insertion_point(field_set:tfaaspb.Class.probability)
}

// -------------------------------------------------------------------

// Predictions

// repeated .tfaaspb.Class prediction = 1;
inline int Predictions::prediction_size() const {
  return prediction_.size();
}
inline void Predictions::clear_prediction() {
  prediction_.Clear();
}
inline const ::tfaaspb::Class& Predictions::prediction(int index) const {
  // @@protoc_insertion_point(field_get:tfaaspb.Predictions.prediction)
  return prediction_.Get(index);
}
inline ::tfaaspb::Class* Predictions::mutable_prediction(int index) {
  // @@protoc_insertion_point(field_mutable:tfaaspb.Predictions.prediction)
  return prediction_.Mutable(index);
}
inline ::tfaaspb::Class* Predictions::add_prediction() {
  // @@protoc_insertion_point(field_add:tfaaspb.Predictions.prediction)
  return prediction_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tfaaspb::Class >*
Predictions::mutable_prediction() {
  // @@protoc_insertion_point(field_mutable_list:tfaaspb.Predictions.prediction)
  return &prediction_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tfaaspb::Class >&
Predictions::prediction() const {
  // @@protoc_insertion_point(field_list:tfaaspb.Predictions.prediction)
  return prediction_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tfaaspb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tfaas_2eproto__INCLUDED
